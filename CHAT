#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

unsigned int hex_to_dec(const char* hex);
unsigned int oct_to_dec(const char* oct);
unsigned int bin_to_dec(const char* bin);
void dec_to_bin(unsigned int num, char* bin);
void dec_to_oct(unsigned int num, char* oct);
void dec_to_hex(unsigned int num, char* hex);

int main() {
    unsigned int decimal, hexadecimal, octal, binary;
    char bin_str[17], oct_str[6], hex_str[5];

    // Leer y validar el dígito decimal
    do {
        printf("Ingrese un número decimal (0 a 65535): ");
        scanf("%u", &decimal);
    } while (decimal > 65535);

    // Leer y validar el dígito hexadecimal
    char hex_input[5];
    do {
        printf("Ingrese un número hexadecimal (0 a FFFF): ");
        scanf("%4s", hex_input);
        hexadecimal = hex_to_dec(hex_input);
    } while (hexadecimal > 0xFFFF);

    // Leer y validar el dígito octal
    char oct_input[6];
    do {
        printf("Ingrese un número octal (0 a 17777): ");
        scanf("%5s", oct_input);
        octal = oct_to_dec(oct_input);
    } while (octal > 0x1FFF);

    // Leer y validar el dígito binario
    char bin_input[17];
    do {
        printf("Ingrese un número binario (0000 0000 0000 0000): ");
        scanf("%16s", bin_input);
        binary = bin_to_dec(bin_input);
    } while (strcmp(bin_input, "0") != 0 && binary == 0);

    // Convertir y mostrar resultados
    dec_to_bin(decimal, bin_str);
    dec_to_oct(decimal, oct_str);
    dec_to_hex(decimal, hex_str);
    printf("\nDecimal: %u, Hexadecimal: %s, Octal: %s, Binario: %s\n", decimal, hex_str, oct_str, bin_str);

    dec_to_bin(hexadecimal, bin_str);
    dec_to_oct(hexadecimal, oct_str);
    dec_to_hex(hexadecimal, hex_str);
    printf("Decimal (Hex): %u, Octal: %s, Binario: %s\n", hexadecimal, oct_str, bin_str);

    dec_to_bin(octal, bin_str);
    dec_to_oct(octal, oct_str);
    dec_to_hex(octal, hex_str);
    printf("Decimal (Oct): %u, Hexadecimal: %s, Binario: %s\n", octal, hex_str, bin_str);

    dec_to_bin(binary, bin_str);
    dec_to_oct(binary, oct_str);
    dec_to_hex(binary, hex_str);
    printf("Decimal (Bin): %u, Hexadecimal: %s, Octal: %s\n", binary, hex_str, oct_str);

    return 0;
}

unsigned int hex_to_dec(const char* hex) {
    unsigned int result = 0;
    while (*hex) {
        result *= 16;
        if (*hex >= '0' && *hex <= '9') {
            result += *hex - '0';
        } else if (*hex >= 'A' && *hex <= 'F') {
            result += *hex - 'A' + 10;
        }
        hex++;
    }
    return result;
}

unsigned int oct_to_dec(const char* oct) {
    unsigned int result = 0;
    while (*oct) {
        result *= 8;
        result += *oct - '0';
        oct++;
    }
    return result;
}

unsigned int bin_to_dec(const char* bin) {
    unsigned int result = 0;
    while (*bin) {
        result *= 2;
        result += (*bin - '0');
        bin++;
    }
    return result;
}

void dec_to_bin(unsigned int num, char* bin) {
    for (int i = 15; i >= 0; i--) {
        bin[i] = (num % 2) + '0';
        num /= 2;
    }
    bin[16] = '\0';
}

void dec_to_oct(unsigned int num, char* oct) {
    int i = 0;
    while (num > 0) {
        oct[i++] = (num % 8) + '0';
        num /= 8;
    }
    oct[i] = '\0';
    for (int j = 0; j < i / 2; j++) {
        char temp = oct[j];
        oct[j] = oct[i - j - 1];
        oct[i - j - 1] = temp;
    }
}

void dec_to_hex(unsigned int num, char* hex) {
    int i = 0;
    while (num > 0) {
        int remainder = num % 16;
        if (remainder < 10) {
            hex[i++] = remainder + '0';
        } else {
            hex[i++] = (remainder - 10) + 'A';
        }
        num /= 16;
    }
    hex[i] = '\0';
    for (int j = 0; j < i / 2; j++) {
        char temp = hex[j];
        hex[j] = hex[i - j - 1];
        hex[i - j - 1] = temp;
    }
}
