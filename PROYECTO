#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Funciones para convertir entre bases
void decimalABinario(int num, char *resultado);
void decimalAHexadecimal(int num, char *resultado);
void decimalAOctal(int num, char *resultado);
int hexadecimalADecimal(char *hex);
int octalADecimal(char *oct);
int binarioADecimal(char *bin);
int esBinario(char *cad);
int esHexadecimal(char *cad);
int esOctal(char *cad);

int main() {
    int decimal;
    char hex[6], oct[7], bin[18];
    int hexADec, octADec, binADec;
    char binario[18], hexadecimal[6], octal[7];

    // Pedir y validar el número decimal
    while (1) {
        printf("Ingresa un numero entero de 0 a 65535: ");
        scanf("%d", &decimal);
        if (decimal <= 65535 && decimal >= 0) break;
        printf("Error: Numero invalido, intenta otra vez\n");
    }

    // Pedir y validar el número hexadecimal
    while (1) {
        printf("Ingresa un numero hexadecimal de 0 a FFFF, solo en mayusculas: ");
        scanf("%s", hex);
        if (esHexadecimal(hex) && hexadecimalADecimal(hex) <= 0xFFFF) break;
        printf("Error: Numero invalido, intenta otra vez\n");
    }
    hexADec = hexadecimalADecimal(hex);

    // Pedir y validar el número octal
    while (1) {
        printf("Ingresa un numero octal de 0 a 17777: ");
        scanf("%s", oct);
        if (esOctal(oct) && octalADecimal(oct) <= 017777) break;
        printf("Error: Numero invalido, intenta otra vez\n");
    }
    octADec = octalADecimal(oct);

    // Pedir y validar el número binario
    while (1) {
        printf("Ingresa un numero binario de 0 a 1111111111111111: ");
        scanf("%s", bin);
        if (esBinario(bin) && strlen(bin) <= 16) break;
        printf("Error: Numero invalido, intentalo otra vez.\n");
    }
    binADec = binarioADecimal(bin);

    // Mostrar tabla con los resultados
    printf("\n%12s%12s%12s%12s%12s\n", "Entrada", "Decimal", "\tBinario", "\t\tOctal", "\t\t\tHexadecimal");
    printf("-----------------------------------------------------------------------------------------------------\n");

    // Convertir y mostrar cada entrada en cada base
    decimalABinario(decimal, binario);
    decimalAOctal(decimal, octal);
    decimalAHexadecimal(decimal, hexadecimal);
    printf("%12d%12d\t%12s\t%-12s\t%12s\n", decimal, decimal, binario, octal, hexadecimal);

    decimalABinario(hexADec, binario);
    decimalAOctal(hexADec, octal);
    decimalAHexadecimal(hexADec, hexadecimal);
    printf("%12s%12d\t%12s\t%-12s\t%12s\n", hex, hexADec, binario, octal, hexadecimal);

    decimalABinario(octADec, binario);
    decimalAOctal(octADec, octal);
    decimalAHexadecimal(octADec, hexadecimal);
    printf("%12s%12d\t%12s\t%-12s\t%12s\n", oct, octADec, binario, octal, hexadecimal);

    decimalABinario(binADec, binario);
    decimalAOctal(binADec, octal);
    decimalAHexadecimal(binADec, hexadecimal);
    printf("%12s%12d\t%12s\t%-12s\t%12s\n", bin, binADec, binario, octal, hexadecimal);

    return 0;
}

// Conversiones
void decimalABinario(int num, char *resultado) {
    resultado[0] = '\0';
    for (int i = 15; i >= 0; i--) {
        strcat(resultado, (num & (1 << i)) ? "1" : "0");
    }
}

void decimalAHexadecimal(int num, char *resultado) {
    char *hexDigitos = "0123456789ABCDEF";
    int i = 3;
    resultado[4] = '\0';
    do {
        resultado[i--] = hexDigitos[num % 16];
        num /= 16;
    } while (num > 0 && i >= 0);
    while (i >= 0) resultado[i--] = '0';
}

void decimalAOctal(int num, char *resultado) {
    int i = 0;
    
    // Generar los dígitos octales
    if (num == 0) {
        resultado[i++] = '0';
    } else {
        while (num > 0) {
            resultado[i++] = '0' + (num % 8);
            num /= 8;
        }
    }
    resultado[i] = '\0';

    // Revertir la cadena
    for (int j = 0; j < i / 2; j++) {
        char temp = resultado[j];
        resultado[j] = resultado[i - j - 1];
        resultado[i - j - 1] = temp;
    }
}

int hexadecimalADecimal(char *hex) {
    int resultado = 0;
    while (*hex) {
        resultado = resultado * 16 + (*hex <= '9' ? *hex - '0' : *hex - 'A' + 10);
        hex++;
    }
    return resultado;
}

int octalADecimal(char *oct) {
    unsigned int resultado = 0;
    while (*oct) {
        resultado = resultado * 8 + (*oct - '0');
        oct++;
    }
    return resultado;
}

int binarioADecimal(char *bin) {
    int resultado = 0;
    while (*bin) {
        resultado = resultado * 2 + (*bin - '0');
        bin++;
    }
    return resultado;
}

// Validaciones
int esBinario(char *cad) {
    while (*cad) {
        if (*cad != '0' && *cad != '1') return 0;
        cad++;
    }
    return 1;
}

int esHexadecimal(char *cad) {
    while (*cad) {
        if ((*cad >= '0' && *cad <= '9') || (*cad >= 'A' && *cad <= 'F')) {
            cad++;
        } else {
            return 0; 
        }
    }
    return 1; 
}

int esOctal(char *cad) {
    while (*cad) {
        if (*cad < '0' || *cad > '7') return 0;
        cad++;
    }
    return 1;
}
